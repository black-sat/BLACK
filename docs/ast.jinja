{% macro build_ast(astlist, name) %}
{% for ast in astlist %}
{% if ast.name == name %}

``using namespace black::{{ast.namespace}};``

.. cpp:namespace:: black::{{ast.namespace}}

{% for section in ast.sections %}

{{section.doc}}
{{'~' * (section.doc|length)}}

{% for node in section.nodes %}
.. cpp:struct:: {{node.name}}

   {{node.doc}}.

   {% if node is composite %}
   :constructor:
      .. cpp:function:: {{ node.name }}(
            {%- for field in node.fields -%}
            {{field.type}} {{field.name}}{{", " if not loop.last else ""}}
            {%- endfor -%}
      )

      {% for field in node.fields %}
         :param {{field.name}}: {{field.doc}}.
      {% endfor %}

   {% else %}
   .. note::
      This {{ast.name}} type is *primitive*, therefore it has no 
      constructors. Use :cpp:func:`{{ast.factory.name}}::{{node.name}}()` to 
      create objects of this type.
   {% endif %}

   {% if (node.fields|length) > 0 %}   
   :members:

   {% for field in node.fields %}
      .. cpp:function:: {{field.type}} {{field.name}}() const

         :returns: {{field.doc}}.

   {% endfor %}
   {% endif %}
        
{% endfor %}
{% endfor %}

{% endif %}
{% endfor %}
{% endmacro %}